resources:
  - name: source
    type: git
    source:
      uri: https://github.com/candidpartners/concourse-cicd-demo.git
      branch: noserverless

jobs:
  - name: serviceOne
    serial: true
    plan:
      - get: source
        trigger: true

      - task: settings
        params:
          ENV: ((environment))
        config:
          platform: linux
          inputs:
            - name: source
          outputs:
            - name: settings
          image_resource:
            type: docker-image
            source:
              repository: 005901988046.dkr.ecr.us-east-2.amazonaws.com/concourse-worker
              tag: latest
              aws_access_key_id: ((aws_access_key_id))
              aws_secret_access_key: ((aws_secret_access_key))
          run:
            dir: source
            path: make
            args:
              - settings

      - task: deploy-infrastructure
        params:
          ENV: ((environment))
          AWS_ACCESS_KEY_ID: ((aws_access_key_id))
          AWS_SECRET_ACCESS_KEY: ((aws_secret_access_key))
        config:
          platform: linux
          inputs:
            - name: source
            - name: settings
          outputs:
            - name: settings
          image_resource:
            type: docker-image
            source:
              repository: 005901988046.dkr.ecr.us-east-2.amazonaws.com/concourse-worker
              tag: latest
              aws_access_key_id: ((aws_access_key_id))
              aws_secret_access_key: ((aws_secret_access_key))
          run:
            dir: source/serviceOne/infrastructure
            path: make

      # Install dependencies, run unit tests, create webpack bundle, build
      - task: build-lambda
        params:
          ENV: ((environment))
        config:
          platform: linux
          inputs:
            - name: source
            - name: settings
          outputs:
            - name: source
            - name: build
          image_resource:
            type: docker-image
            source:
              repository: 005901988046.dkr.ecr.us-east-2.amazonaws.com/concourse-worker
              tag: latest
              aws_access_key_id: ((aws_access_key_id))
              aws_secret_access_key: ((aws_secret_access_key))
          run:
            dir: source/serviceOne/lambda
            path: make
            args:
              - build

      - task: test-lambda
        params:
          ENV: ((environment))
        config:
          platform: linux
          inputs:
            - name: source
            - name: settings
          image_resource:
            type: docker-image
            source:
              repository: 005901988046.dkr.ecr.us-east-2.amazonaws.com/concourse-worker
              tag: latest
              aws_access_key_id: ((aws_access_key_id))
              aws_secret_access_key: ((aws_secret_access_key))
          run:
            dir: source/serviceOne/lambda
            path: make
            args:
              - test

      - task: deploy-lambda
        params:
          ENV: ((environment))
          AWS_ACCESS_KEY_ID: ((aws_access_key_id))
          AWS_SECRET_ACCESS_KEY: ((aws_secret_access_key))
        config:
          platform: linux
          inputs:
            - name: settings
            - name: build
          image_resource:
            type: docker-image
            source:
              repository: 005901988046.dkr.ecr.us-east-2.amazonaws.com/concourse-worker
              tag: latest
              aws_access_key_id: ((aws_access_key_id))
              aws_secret_access_key: ((aws_secret_access_key))
          run:
            dir: source/serviceOne/lambda
            path: make
            args:
              - deploy

      - task: functional-tests
        params:
          ENV: ((environment))
          AWS_ACCESS_KEY_ID: ((aws_access_key_id))
          AWS_SECRET_ACCESS_KEY: ((aws_secret_access_key))
        config:
          platform: linux
          inputs:
            - name: source
            - name: settings
          image_resource:
            type: docker-image
            source:
              repository: 005901988046.dkr.ecr.us-east-2.amazonaws.com/concourse-worker
              tag: latest
              aws_access_key_id: ((aws_access_key_id))
              aws_secret_access_key: ((aws_secret_access_key))
          run:
            dir: source/serviceOne/functional_tests
            path: sh
            args:
              - -exc
              - |
                npm install
                npm test

  - name: serviceTwo
    serial: true
    plan:
      - get: source
        trigger: true

      - task: settings
        params:
          ENV: ((environment))
        config:
          platform: linux
          inputs:
            - name: source
          outputs:
            - name: settings
          image_resource:
            type: docker-image
            source:
              repository: 005901988046.dkr.ecr.us-east-2.amazonaws.com/concourse-worker
              tag: latest
              aws_access_key_id: ((aws_access_key_id))
              aws_secret_access_key: ((aws_secret_access_key))
          run:
            path: sh
            dir: source
            args:
              - -exc
              - jq -s '.[0] * .[1]' project-settings.json config/$ENV.json > ../settings/settings.json

      - task: deploy-infrastructure
        params:
          ENV: ((environment))
          AWS_ACCESS_KEY_ID: ((aws_access_key_id))
          AWS_SECRET_ACCESS_KEY: ((aws_secret_access_key))
        config:
          platform: linux
          inputs:
            - name: source
            - name: settings
          outputs:
            - name: settings
          image_resource:
            type: docker-image
            source:
              repository: 005901988046.dkr.ecr.us-east-2.amazonaws.com/concourse-worker
              tag: latest
              aws_access_key_id: ((aws_access_key_id))
              aws_secret_access_key: ((aws_secret_access_key))
          run:
            dir: source/serviceTwo/infrastructure
            path: sh
            args:
              - -ec
              - |
                # Top level where source and input/output are mounted
                WORKSPACE=../../..
                SETTINGS=$WORKSPACE/settings

                SETTINGS_FILE=$SETTINGS/settings.json
                TFOUTPUT_FILE=$SETTINGS/infrastructure.json

                ENV_NAME=`jq -r .environment $SETTINGS_FILE`
                STATE_BUCKET=`jq -r .stateBucket $SETTINGS_FILE`
                TF_STATE_KEY=`jq -r .tfStateKey $SETTINGS_FILE`
                REGION=`jq -r .region $SETTINGS_FILE`

                terraform init \
                  -backend-config "bucket=${STATE_BUCKET}" \
                  -backend-config "key=${TF_STATE_KEY}/serviceTwo/${ENV_NAME}.tfstate" \
                  -backend-config "region=${REGION}"

                terraform apply -auto-approve -var-file="$SETTINGS/settings.json"
                terraform output -json > $SETTINGS/infrastructure.json


      # Install dependencies, run unit tests, create webpack bundle, build
      - task: build-lambda
        params:
          ENV: ((environment))
        config:
          platform: linux
          inputs:
            - name: source
            - name: settings
          outputs:
            - name: source
            - name: build
          image_resource:
            type: docker-image
            source:
              repository: 005901988046.dkr.ecr.us-east-2.amazonaws.com/concourse-worker
              tag: latest
              aws_access_key_id: ((aws_access_key_id))
              aws_secret_access_key: ((aws_secret_access_key))
          run:
            dir: source/serviceTwo/lambda
            path: sh
            args:
              - -ec
              - |
                # Directories created by concourse for passing input/output between tasks
                WORKSPACE=../../..
                SETTINGS=$WORKSPACE/settings
                BUILD=$WORKSPACE/build

                # Install dependencies
                npm install

                # Bundle source and dependencies
                npx webpack

                # Build config file for lambda
                jq -s '.[0] * .[1]' $SETTINGS/settings.json $SETTINGS/infrastructure.json > ./dist/config.json

                # hash the code to use as zip bundle filename
                hash=($(md5sum dist/index.js))

                # Build zip bundle for uploading to lambda
                zip -jr $BUILD/${hash}.zip dist


      - task: test-lambda
        params:
          ENV: ((environment))
        config:
          platform: linux
          inputs:
            - name: source
            - name: settings
          image_resource:
            type: docker-image
            source:
              repository: 005901988046.dkr.ecr.us-east-2.amazonaws.com/concourse-worker
              tag: latest
              aws_access_key_id: ((aws_access_key_id))
              aws_secret_access_key: ((aws_secret_access_key))
          run:
            dir: source/serviceTwo/lambda
            path: npm
            args:
              - test

      - task: deploy-lambda
        params:
          ENV: ((environment))
          AWS_ACCESS_KEY_ID: ((aws_access_key_id))
          AWS_SECRET_ACCESS_KEY: ((aws_secret_access_key))
        config:
          platform: linux
          inputs:
            - name: settings
            - name: build
          image_resource:
            type: docker-image
            source:
              repository: 005901988046.dkr.ecr.us-east-2.amazonaws.com/concourse-worker
              tag: latest
              aws_access_key_id: ((aws_access_key_id))
              aws_secret_access_key: ((aws_secret_access_key))
          run:
            path: sh
            args:
              - -exc
              - |
                FUNCTION_NAME=`jq -r .lambda_function.value settings/infrastructure.json`
                REGION=`jq -r .region settings/settings.json`
                ZIPFILE=`basename build/*.zip`
                export AWS_PAGER=""

                aws lambda update-function-code --region $REGION --function-name $FUNCTION_NAME --zip-file fileb://build/$ZIPFILE


      - task: functional-tests
        params:
          ENV: ((environment))
          AWS_ACCESS_KEY_ID: ((aws_access_key_id))
          AWS_SECRET_ACCESS_KEY: ((aws_secret_access_key))
        config:
          platform: linux
          inputs:
            - name: source
            - name: settings
          image_resource:
            type: docker-image
            source:
              repository: 005901988046.dkr.ecr.us-east-2.amazonaws.com/concourse-worker
              tag: latest
              aws_access_key_id: ((aws_access_key_id))
              aws_secret_access_key: ((aws_secret_access_key))
          run:
            dir: source/serviceTwo/functional_tests
            path: sh
            args:
              - -exc
              - |
                npm install
                npm test
